// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quattro.Models;

namespace Quattro.Migrations
{
    [DbContext(typeof(QuattroContext))]
    partial class QuattroContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("Quattro.Models.Compañero", b =>
                {
                    b.Property<int>("Matricula");

                    b.Property<string>("Apellidos");

                    b.Property<int>("Calificacion");

                    b.Property<int>("Deuda");

                    b.Property<string>("Nombre");

                    b.Property<string>("Notas");

                    b.Property<string>("Telefono");

                    b.HasKey("Matricula");

                    b.ToTable("Compañeros");

                    b.HasData(
                        new { Matricula = 0, Calificacion = 0, Deuda = 0, Nombre = "Desconocido" }
                    );
                });

            modelBuilder.Entity("Quattro.Models.DiaCalendario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Acumuladas");

                    b.Property<string>("Bus");

                    b.Property<bool>("Cena");

                    b.Property<int>("CodigoIncidencia")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<bool>("Comida");

                    b.Property<bool>("Desayuno");

                    b.Property<bool>("EsFestivo");

                    b.Property<bool>("EsFranqueo");

                    b.Property<decimal>("Euros");

                    b.Property<string>("Fecha")
                        .IsRequired();

                    b.Property<int?>("Final");

                    b.Property<decimal>("HorasHuelga");

                    b.Property<bool>("HuelgaParcial");

                    b.Property<int?>("Inicio");

                    b.Property<string>("LugarFinal");

                    b.Property<string>("LugarInicio");

                    b.Property<int>("MatriculaRelevo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("MatriculaSusti")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<decimal>("Nocturnas");

                    b.Property<string>("Notas");

                    b.Property<string>("NumeroLinea");

                    b.Property<string>("Servicio");

                    b.Property<string>("TextoLinea");

                    b.Property<int?>("TomaDeje");

                    b.Property<decimal>("Trabajadas");

                    b.Property<int>("Turno");

                    b.HasKey("Id");

                    b.HasIndex("CodigoIncidencia");

                    b.HasIndex("MatriculaRelevo");

                    b.HasIndex("MatriculaSusti");

                    b.ToTable("Calendario");
                });

            modelBuilder.Entity("Quattro.Models.HoraAjena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Codigo");

                    b.Property<string>("Fecha")
                        .IsRequired();

                    b.Property<decimal>("Horas");

                    b.Property<string>("Motivo");

                    b.HasKey("Id");

                    b.ToTable("HorasAjenas");
                });

            modelBuilder.Entity("Quattro.Models.Incidencia", b =>
                {
                    b.Property<int>("Codigo");

                    b.Property<string>("Notas");

                    b.Property<string>("TextoIncidencia");

                    b.Property<int>("Tipo");

                    b.HasKey("Codigo");

                    b.ToTable("Incidencias");

                    b.HasData(
                        new { Codigo = 0, Notas = "Incidencia Protegida.", TextoIncidencia = "Repite día anterior", Tipo = 0 },
                        new { Codigo = 1, Notas = "Incidencia Protegida.", TextoIncidencia = "Trabajo", Tipo = 1 },
                        new { Codigo = 2, Notas = "Incidencia Protegida.", TextoIncidencia = "Franqueo", Tipo = 4 },
                        new { Codigo = 3, Notas = "Incidencia Protegida.", TextoIncidencia = "Vacaciones", Tipo = 4 },
                        new { Codigo = 4, Notas = "Incidencia Protegida.", TextoIncidencia = "F.O.D.", Tipo = 3 },
                        new { Codigo = 5, Notas = "Incidencia Protegida.", TextoIncidencia = "Franqueo a trabajar", Tipo = 2 },
                        new { Codigo = 6, Notas = "Incidencia Protegida.", TextoIncidencia = "Enferma/o", Tipo = 4 },
                        new { Codigo = 7, Notas = "Incidencia Protegida.", TextoIncidencia = "Accidentada/o", Tipo = 4 },
                        new { Codigo = 8, Notas = "Incidencia Protegida.", TextoIncidencia = "Permiso", Tipo = 6 },
                        new { Codigo = 9, Notas = "Incidencia Protegida.", TextoIncidencia = "F.N.R. año actual", Tipo = 4 },
                        new { Codigo = 10, Notas = "Incidencia Protegida.", TextoIncidencia = "F.N.R. año anterior", Tipo = 4 },
                        new { Codigo = 11, Notas = "Incidencia Protegida.", TextoIncidencia = "Nos hacen el día", Tipo = 1 },
                        new { Codigo = 12, Notas = "Incidencia Protegida.", TextoIncidencia = "Hacemos el día", Tipo = 5 },
                        new { Codigo = 13, Notas = "Incidencia Protegida.", TextoIncidencia = "Sanción", Tipo = 4 },
                        new { Codigo = 14, Notas = "Incidencia Protegida.", TextoIncidencia = "En otro destino", Tipo = 4 },
                        new { Codigo = 15, Notas = "Incidencia Protegida.", TextoIncidencia = "Huelga", Tipo = 5 },
                        new { Codigo = 16, Notas = "Incidencia Protegida.", TextoIncidencia = "Día por H. Acumuladas", Tipo = 3 }
                    );
                });

            modelBuilder.Entity("Quattro.Models.Linea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Notas");

                    b.Property<string>("NumeroLinea");

                    b.Property<string>("TextoLinea");

                    b.HasKey("Id");

                    b.ToTable("Lineas");
                });

            modelBuilder.Entity("Quattro.Models.ServicioAuxiliar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Final");

                    b.Property<int?>("Inicio");

                    b.Property<string>("LugarFinal");

                    b.Property<string>("LugarInicio");

                    b.Property<string>("NumeroLinea");

                    b.Property<string>("Servicio");

                    b.Property<int>("ServicioLineaId");

                    b.Property<int>("Turno");

                    b.HasKey("Id");

                    b.HasIndex("ServicioLineaId");

                    b.ToTable("ServiciosAuxiliares");
                });

            modelBuilder.Entity("Quattro.Models.ServicioCalendario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DiaCalendarioId");

                    b.Property<int?>("Final");

                    b.Property<int?>("Inicio");

                    b.Property<string>("LugarFinal");

                    b.Property<string>("LugarInicio");

                    b.Property<string>("NumeroLinea");

                    b.Property<string>("Servicio");

                    b.Property<int>("Turno");

                    b.HasKey("Id");

                    b.HasIndex("DiaCalendarioId");

                    b.ToTable("ServiciosCalendario");
                });

            modelBuilder.Entity("Quattro.Models.ServicioLinea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Acumuladas");

                    b.Property<bool>("Cena");

                    b.Property<bool>("Comida");

                    b.Property<bool>("Desayuno");

                    b.Property<decimal>("Euros");

                    b.Property<int?>("Final");

                    b.Property<int?>("Inicio");

                    b.Property<int>("LineaId");

                    b.Property<string>("LugarFinal");

                    b.Property<string>("LugarInicio");

                    b.Property<decimal>("Nocturnas");

                    b.Property<string>("Notas");

                    b.Property<string>("NumeroLinea");

                    b.Property<string>("Servicio");

                    b.Property<int?>("TomaDeje");

                    b.Property<decimal>("Trabajadas");

                    b.Property<int>("Turno");

                    b.HasKey("Id");

                    b.HasIndex("LineaId");

                    b.ToTable("ServiciosLinea");
                });

            modelBuilder.Entity("Quattro.Models.DiaCalendario", b =>
                {
                    b.HasOne("Quattro.Models.Incidencia", "Incidencia")
                        .WithMany("DiasCalendario")
                        .HasForeignKey("CodigoIncidencia")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Quattro.Models.Compañero", "Relevo")
                        .WithMany("Relevos")
                        .HasForeignKey("MatriculaRelevo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Quattro.Models.Compañero", "Susti")
                        .WithMany("Sustis")
                        .HasForeignKey("MatriculaSusti")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Quattro.Models.ServicioAuxiliar", b =>
                {
                    b.HasOne("Quattro.Models.ServicioLinea", "ServicioLinea")
                        .WithMany("Servicios")
                        .HasForeignKey("ServicioLineaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Quattro.Models.ServicioCalendario", b =>
                {
                    b.HasOne("Quattro.Models.DiaCalendario", "DiaCalendario")
                        .WithMany("Servicios")
                        .HasForeignKey("DiaCalendarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Quattro.Models.ServicioLinea", b =>
                {
                    b.HasOne("Quattro.Models.Linea", "Linea")
                        .WithMany("Servicios")
                        .HasForeignKey("LineaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
